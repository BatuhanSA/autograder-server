name: Main

on:
  - push
  - pull_request

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PLATFORMS: 'linux/amd64,linux/arm64'
  # TEST
  # PUSH_IMAGES: ${{ (github.ref == 'refs/heads/main') && (github.repository_owner == 'edulinq') }}
  PUSH_IMAGES: ${{ ((github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/eriq-ci-rework')) && (github.repository_owner == 'edulinq') }}

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04', 'ubuntu-24.04', 'macos-13', 'macos-14', 'macos-15']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.0'

      - name: Build
        run: ./scripts/build.sh

      - name: Check Formatting
        run: ./scripts/check_formatting.sh

      - name: Check Duplicate Locators
        run: ./scripts/check_duplicate_locators.sh

      - name: Run Base Tests
        env:
          AUTOGRADER__DOCKER__DISABLE: ${{ startsWith(matrix.os, 'macos') }}
        run: ./scripts/run_tests.sh

  deploy-prebuilt:
    name: Deploy Prebuilt
    needs: test
    # TEST
    # if: ${{ (github.ref == 'refs/heads/main') }}
    if: ${{ (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/eriq-ci-rework') }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          # See https://github.com/docker/setup-qemu-action/issues/198
          image: tonistiigi/binfmt:qemu-v7.0.0-28

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: docker/prebuilt/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ env.PUSH_IMAGES }}
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prebuilt"

      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v2
        if: ${{ env.PUSH_IMAGES }}
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy-slim:
    name: Deploy Slim
    needs: test
    # TEST
    # if: ${{ (github.ref == 'refs/heads/main') }}
    if: ${{ (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/eriq-ci-rework') }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          # See https://github.com/docker/setup-qemu-action/issues/198
          image: tonistiigi/binfmt:qemu-v7.0.0-28

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: docker/slim/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ env.PUSH_IMAGES }}
          tags: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:slim"

      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v2
        if: ${{ env.PUSH_IMAGES }}
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
